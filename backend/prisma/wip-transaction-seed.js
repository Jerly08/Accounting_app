// WIP Transaction Seed Script - Creates accounting entries for WIP data
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const { format } = require('date-fns');

async function main() {
  console.log('Starting WIP transaction seed process...');
  
  // Get all WIP history entries
  const wipHistories = await prisma.wip_history.findMany({
    include: {
      project: true
    },
    orderBy: {
      date: 'desc'
    }
  });
  
  console.log(`Found ${wipHistories.length} WIP history entries to process`);
  
  if (wipHistories.length === 0) {
    console.log('No WIP history entries found. Please run the WIP seed script first.');
    return;
  }
  
  // Get chart of accounts to find appropriate account codes
  const accounts = await prisma.chartofaccount.findMany();
  
  // Find necessary accounts
  const wipAssetAccount = accounts.find(a => a.name.includes('Work In Progress') || a.name.includes('WIP'));
  const revenueRecognitionAccount = accounts.find(a => a.name.includes('Revenue Recognition') || a.name.includes('Unbilled Revenue'));
  const cashAccount = accounts.find(a => a.name.includes('Cash') || a.name.includes('Bank'));
  const advanceFromCustomersAccount = accounts.find(a => a.name.includes('Advance') || a.name.includes('Customer Deposit'));
  
  // Use existing accounts or find suitable alternatives
  const wipAssetAccountCode = wipAssetAccount?.code || accounts.find(a => a.type === 'Aktiva' && a.category === 'Current Assets')?.code;
  const revenueRecognitionAccountCode = revenueRecognitionAccount?.code || accounts.find(a => a.type === 'Pendapatan')?.code;
  const cashAccountCode = cashAccount?.code || accounts.find(a => a.type === 'Aktiva' && a.name.includes('Kas'))?.code;
  const advanceFromCustomersAccountCode = advanceFromCustomersAccount?.code || accounts.find(a => a.type === 'Kewajiban')?.code;
  
  if (!wipAssetAccountCode || !revenueRecognitionAccountCode || !cashAccountCode || !advanceFromCustomersAccountCode) {
    console.error('Could not find required account codes in chart of accounts.');
    console.log('Available accounts:', accounts.map(a => `${a.code} - ${a.name} (${a.type})`).join('\n'));
    return;
  }
  
  console.log(`Using accounts:
    WIP Asset: ${wipAssetAccountCode} - ${accounts.find(a => a.code === wipAssetAccountCode)?.name}
    Revenue Recognition: ${revenueRecognitionAccountCode} - ${accounts.find(a => a.code === revenueRecognitionAccountCode)?.name}
    Cash: ${cashAccountCode} - ${accounts.find(a => a.code === cashAccountCode)?.name}
    Advance from Customers: ${advanceFromCustomersAccountCode} - ${accounts.find(a => a.code === advanceFromCustomersAccountCode)?.name}
  `);
  
  // Process each project's latest WIP entry
  const processedProjects = new Set();
  let totalWipValue = 0;
  
  for (const wipEntry of wipHistories) {
    // Only process the latest entry for each project
    if (processedProjects.has(wipEntry.projectId)) {
      continue;
    }
    
    processedProjects.add(wipEntry.projectId);
    
    const projectName = wipEntry.project?.name || `Project ID ${wipEntry.projectId}`;
    console.log(`Processing WIP transactions for ${projectName}`);
    
    const wipValue = Number(wipEntry.wipValue);
    
    if (wipValue <= 0) {
      console.log(`  Skipping ${projectName} as WIP value is ${wipValue}`);
      continue;
    }
    
    totalWipValue += wipValue;
    
    // Create WIP asset entry (debit)
    await prisma.transaction.create({
      data: {
        date: wipEntry.date,
        type: 'asset',
        accountCode: wipAssetAccountCode,
        description: `WIP Asset for ${projectName}`,
        amount: wipValue,
        projectId: wipEntry.projectId,
        notes: 'Generated by WIP transaction seed script',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
    
    // Create Revenue Recognition entry (credit)
    await prisma.transaction.create({
      data: {
        date: wipEntry.date,
        type: 'income',
        accountCode: revenueRecognitionAccountCode,
        description: `Revenue Recognition for ${projectName}`,
        amount: wipValue,
        projectId: wipEntry.projectId,
        notes: 'Generated by WIP transaction seed script (counter entry)',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
    
    console.log(`  Created WIP transactions for ${projectName} with amount ${wipValue}`);
  }
  
  console.log(`Total WIP value processed: ${totalWipValue}`);
  
  // Handle negative WIP (advance from customers)
  const advanceAmount = 180000000; // Rp 180,000,000 from balance sheet
  
  // Create an entry for the advance from customers
  await prisma.transaction.create({
    data: {
      date: new Date(),
      type: 'liability',
      accountCode: advanceFromCustomersAccountCode,
      description: 'Advance from Customers (Negative WIP)',
      amount: advanceAmount,
      projectId: null,
      notes: 'Generated by WIP transaction seed script',
      createdAt: new Date(),
      updatedAt: new Date()
    }
  });
  
  // Create counter entry for cash received
  await prisma.transaction.create({
    data: {
      date: new Date(),
      type: 'asset',
      accountCode: cashAccountCode,
      description: 'Cash received for customer advances',
      amount: advanceAmount,
      projectId: null,
      notes: 'Generated by WIP transaction seed script (counter entry)',
      createdAt: new Date(),
      updatedAt: new Date()
    }
  });
  
  console.log(`Created transactions for Advance from Customers (Rp ${advanceAmount})`);
  console.log('WIP transaction seed completed successfully');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 