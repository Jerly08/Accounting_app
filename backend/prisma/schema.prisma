generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model billing {
  id          Int      @id @default(autoincrement())
  projectId   Int
  billingDate DateTime
  percentage  Decimal  @db.Decimal(5, 2)
  amount      Decimal  @db.Decimal(15, 2)
  status      String   @default("unpaid")
  invoice     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  project     project  @relation(fields: [projectId], references: [id], map: "Billing_projectId_fkey")

  @@index([projectId], map: "Billing_projectId_fkey")
}

model chartofaccount {
  id                 Int                @id @default(autoincrement())
  code               String             @unique(map: "ChartOfAccount_code_key")
  name               String
  type               String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  category           String?
  subcategory        String?
  isCurrentAsset     Boolean?           @default(true)
  isCurrentLiability Boolean?           @default(true)
  cashflow_category  cashflow_category? @relation(fields: [code], references: [accountCode])
  transaction        transaction[]
}

model client {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  project   project[]
}

model fixedasset {
  id                      Int      @id @default(autoincrement())
  assetName               String
  acquisitionDate         DateTime
  value                   Decimal  @db.Decimal(15, 2)
  usefulLife              Int
  accumulatedDepreciation Decimal  @default(0.00) @db.Decimal(15, 2)
  bookValue               Decimal  @db.Decimal(15, 2)
  createdAt               DateTime @default(now())
  updatedAt               DateTime
  category                String   @default("equipment")
}

model project {
  id          Int           @id @default(autoincrement())
  projectCode String        @unique(map: "Project_projectCode_key")
  name        String
  clientId    Int
  startDate   DateTime
  endDate     DateTime?
  totalValue  Decimal       @db.Decimal(15, 2)
  status      String        @default("ongoing")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  description String?
  progress    Decimal?      @default(0.00) @db.Decimal(5, 2)
  billing     billing[]
  client      client        @relation(fields: [clientId], references: [id], map: "Project_clientId_fkey")
  projectcost projectcost[]
  transaction transaction[]
  wip_history wip_history[]

  @@index([clientId], map: "Project_clientId_fkey")
}

model projectcost {
  id          Int      @id @default(autoincrement())
  projectId   Int
  category    String
  description String
  amount      Decimal  @db.Decimal(15, 2)
  date        DateTime
  status      String   @default("pending")
  receipt     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  project     project  @relation(fields: [projectId], references: [id], map: "ProjectCost_projectId_fkey")

  @@index([projectId], map: "ProjectCost_projectId_fkey")
}

model setting {
  id                    Int      @id @default(autoincrement())
  companyName           String
  companyAddress        String?
  companyPhone          String?
  companyEmail          String?
  taxNumber             String?
  currency              String   @default("IDR")
  currencySymbol        String   @default("Rp")
  invoicePrefix         String   @default("INV")
  projectPrefix         String   @default("PRJ")
  fiscalYearStart       String   @default("01-01")
  vatRate               Decimal  @default(11.00) @db.Decimal(5, 2)
  defaultPaymentTerms   Int      @default(30)
  reminderDays          Int      @default(7)
  boringDefaultRate     Decimal  @default(3500000.00) @db.Decimal(15, 2)
  sondirDefaultRate     Decimal  @default(2000000.00) @db.Decimal(15, 2)
  enableUserRoles       Boolean  @default(true)
  allowClientPortal     Boolean  @default(false)
  enableTwoFactor       Boolean  @default(false)
  enableAutomaticBackup Boolean  @default(true)
  backupFrequency       String   @default("daily")
  lastUpdated           DateTime @default(now())
  updatedBy             Int?
}

model transaction {
  id             Int            @id @default(autoincrement())
  date           DateTime
  type           String
  accountCode    String
  description    String
  amount         Decimal        @db.Decimal(15, 2)
  projectId      Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  notes          String?
  chartofaccount chartofaccount @relation(fields: [accountCode], references: [code], map: "Transaction_accountCode_fkey")
  project        project?       @relation(fields: [projectId], references: [id], map: "Transaction_projectId_fkey")

  @@index([accountCode], map: "Transaction_accountCode_fkey")
  @@index([projectId], map: "Transaction_projectId_fkey")
}

model user {
  id        Int      @id @default(autoincrement())
  username  String   @unique(map: "User_username_key")
  email     String   @unique(map: "User_email_key")
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model cashflow_category {
  id             Int             @id @default(autoincrement())
  accountCode    String          @unique
  category       String
  subcategory    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  chartofaccount chartofaccount?
}

model cashflow_report {
  id                Int       @id @default(autoincrement())
  startDate         DateTime
  endDate           DateTime
  reportData        Json
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  createdBy         Int?
  isComparative     Boolean   @default(false)
  previousStartDate DateTime?
  previousEndDate   DateTime?
}

model wip_history {
  id          Int      @id @default(autoincrement())
  projectId   Int
  date        DateTime
  wipValue    Decimal  @db.Decimal(15, 2)
  earnedValue Decimal  @db.Decimal(15, 2)
  billedValue Decimal  @db.Decimal(15, 2)
  totalCost   Decimal  @db.Decimal(15, 2)
  progress    Decimal  @db.Decimal(5, 2)
  riskScore   Int?     @default(0)
  ageInDays   Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([date])
}

model wip_report {
  id                Int       @id @default(autoincrement())
  startDate         DateTime
  endDate           DateTime
  reportData        Json
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  createdBy         Int?
  isComparative     Boolean   @default(false)
  previousStartDate DateTime?
  previousEndDate   DateTime?
}
